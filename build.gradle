group 'com.guochen'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'idea'
    apply plugin: "com.github.johnrengelman.shadow"

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            scala {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/scala')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    ext.versions = [
            scalaMajorMinorVersion: '2.11',
            sparkVersion          : '2.1.1'
    ]

    dependencies {
        compile 'org.scala-lang:scala-library:' + versions.scalaMajorMinorVersion + '.11'

        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile 'org.scalatest:scalatest_' + versions.scalaMajorMinorVersion + ':3.0.3'
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        //Ref: https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/
        //Force integration tests to run every time
        //outputs.upToDateWhen { false }
    }

    test {
        afterTest { desc, result ->
            logger.quiet "==> UNIT TEST ${result.resultType}: ${desc.name} [${desc.className}]"
        }
    }

    integrationTest {
        afterTest { desc, result ->
            logger.quiet "==> INTEGRATION TEST ${result.resultType}: ${desc.name} [${desc.className}]"
        }
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
}